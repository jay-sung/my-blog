<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jay Tech Blog</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Jay Tech Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Aug 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43; Utilities library (1) - optional</title>
      <link>http://localhost:1313/posts/cpp-util-libs/cpp-optional/</link>
      <pubDate>Wed, 06 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/cpp-util-libs/cpp-optional/</guid>
      <description>Optional을 통해 값이 존재할 수도, 존재할 수도 있음을 표현할 수 있습니다.</description>
    </item>
    <item>
      <title>C&#43;&#43; Value Categories</title>
      <link>http://localhost:1313/posts/cpp-value-categories/</link>
      <pubDate>Tue, 05 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/cpp-value-categories/</guid>
      <description>C++ 값 카테고리에 대해서 알아봅니다.</description>
    </item>
    <item>
      <title>.NET GC Deep Dive (2) - LOH(Large Object) Heap</title>
      <link>http://localhost:1313/posts/csharp-gc-series/cpp-mem-manage-lib-2/</link>
      <pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/csharp-gc-series/cpp-mem-manage-lib-2/</guid>
      <description>.NET GC에서 LOH가 성능에 미치는 영향에 대해서 알아봅니다.</description>
    </item>
    <item>
      <title>.NET GC Deep Dive (1) - .NET GC Introduction</title>
      <link>http://localhost:1313/posts/csharp-gc-series/cpp-mem-manage-lib-1/</link>
      <pubDate>Fri, 25 Jul 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/csharp-gc-series/cpp-mem-manage-lib-1/</guid>
      <description>.NET GC 덕분에 귀찮은 메모리 관리를 위임할 수 있어서 행복합니다.</description>
    </item>
    <item>
      <title>C&#43;&#43; Memory Management (4) - C&#43;&#43; Memory helper class</title>
      <link>http://localhost:1313/posts/cpp-mem-manage-series/cpp-mem-manage-lib-4/</link>
      <pubDate>Wed, 23 Jul 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/cpp-mem-manage-series/cpp-mem-manage-lib-4/</guid>
      <description>C++에서 제공하는 Memory helper class에 대해서 알아봅니다.</description>
    </item>
    <item>
      <title>C&#43;&#43; Memory Management (3) - Memory resources</title>
      <link>http://localhost:1313/posts/cpp-mem-manage-series/cpp-mem-manage-lib-3/</link>
      <pubDate>Tue, 22 Jul 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/cpp-mem-manage-series/cpp-mem-manage-lib-3/</guid>
      <description>&lt;code&gt;Allocator&lt;/code&gt;는 대부분에 경우에는 기본으로 제공하는 &lt;code&gt;Allocator&lt;/code&gt;를 사용하는 것이 일반적입니다. 하지만 정교하게 표준 컨테이너들의 메모리 관리를 제어해야하는 경우 사용자가 직접 지정할 수 있게 해줍니다.</description>
    </item>
    <item>
      <title>C&#43;&#43; Memory Management (2) - Allocator</title>
      <link>http://localhost:1313/posts/cpp-mem-manage-series/cpp-mem-manage-lib-2/</link>
      <pubDate>Mon, 21 Jul 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/cpp-mem-manage-series/cpp-mem-manage-lib-2/</guid>
      <description>&lt;code&gt;Allocator&lt;/code&gt;는 대부분에 경우에는 기본으로 제공하는 &lt;code&gt;Allocator&lt;/code&gt;를 사용하는 것이 일반적입니다. 하지만 정교하게 표준 컨테이너들의 메모리 관리를 제어해야하는 경우 사용자가 직접 지정할 수 있게 해줍니다.</description>
    </item>
    <item>
      <title>C&#43;&#43; Memory Management (1) - Smart Pointer</title>
      <link>http://localhost:1313/posts/cpp-mem-manage-series/cpp-mem-manage-lib-1/</link>
      <pubDate>Fri, 18 Jul 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/cpp-mem-manage-series/cpp-mem-manage-lib-1/</guid>
      <description>C++에서 포인터를 쓰는 경우 웬만하면 &lt;code&gt;Smart Pointer&lt;/code&gt;를 사용하는 것을 강력하게 권장합니다.</description>
    </item>
  </channel>
</rss>
